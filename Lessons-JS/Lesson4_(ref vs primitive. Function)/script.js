/**ОБЛАСТЬ ВИДИМОСТІ (Lexical environement) (Різниця між var і let)*/


/*
let x = 0;
var xx = 9;

{
    //Це блок виконання
    console.log(xx);
    console.log(x);
    let z = 22; //Оголошуэм let в області виконання
    var es = 223; //Оголошуєм var в області виконання
}

/!*console.log(z);// цю змінну не буде бачити тому що змінна оголошена в іншому блоці виконання*!/
console.log(es); //Var ігнорує блок виконнаня тому її не використовують.
*/

//__________________________________________________________________________________________________________________

/**ФІШКИ з Інкрементами Декриментами*/


/*let i=0;
/!*let b= i++;*!/     //Якщо ми задамо значення ось так це оначає що ми спочатку присвоюєм змінній b значення i яке дорівнює 0, а
                    //а потім аж виконуєм ++ і тоді змінна (і) стає 1;

let b= ++i;         //Якщо ми задамо значення ось так це означаэ що спочатку виконуэться дія ++ і збільшується а потім вже
                    //значення збільшеної і присвоюється b;

console.log(i);
console.log(b);
*/

//___________________________________________________________________________________________________________________


/**CONVERT TO BOOLIAN*/

/*let x = 0;

let smtToBool = !!x; //Таким записом ми конвертуєм значення в буліан, конвертувати можна масиви обєкти стрінги але 0, null, NaN, undefined і
                    // і пуста стрінга дає false i !true також дає false

console.log(smtToBool);*/

//Перевірка на значення (Конвертацію в буліан)
/*let id = '2';

let isNumber = +id /!*таким записом ми пробуєм зробити значення number*!/ || 100;

console.log(isNumber);
*/

//___________________________________________________________________________________________________________________

/**ТИПИ ДАНИХ JS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/**В JS є 7 типів даних, 3 простих і 4 силочних*/
/**Прості ( primitives): boolian, string, number, undefined*/
/**Силочні (referns): object, null, symbol*/

/*
let a = 22;
let b = a;

b = 90;
console.log(a);
console.log(b);
*/

/*let obj = {a: 20, b: 999};

let antObj = obj;

antObj.a = 17;
obj.b = 6;

console.log(antObj);  //виводить 17 і 6 тому що силочні типи дані не копіюють а зсилаються на те що оголошено вище
                     // (просто зберыгаэ силку на obj)
console.log(obj);   //Те саме!*/

/*let arr = [1,2,3,4,5];

let refArr = arr;

refArr[0] = 55;
arr[2] = 99999;

console.log(refArr); //те саме що ы з обєктами
*/
//_____________________________________________________________________________________________________________________

/**ФУНКЦІЇ!!!*/

/**Функція (function) це частина готового коду який виконуэ якусь дыю який можна викликати в ынших мысцях коду*/


//---------------------------------------------------------------------------------------------------------------------
//Типова функція

/*function func(x, y, z, ya, array  /!*сюди ми записуэм аргументи функції*!/ ) { /!*Це область виконання функції*!/
    console.log(x + y - z + ya)
}

func(10, 6, 22, 23, true); //виклик функції
*/


//---------------------------------------------------------------------------------------------------------------------
/**Функція суматор + створення власно] Error*/

/*function sumator(a, b) /!*Ці змінні живуть тільки для даної функції більше їх ніде не  видно. Можна вказувати тільки назви змінних, аргумент заз амовчування типу (а = 20)*!/ {

    if(typeof a !== 'number' || typeof b !== 'number'){
        throw new Error('Something is not number') //Так задається власна Error
    }
    console.log(a + b);
}

sumator(8, 6);
*/


//---------------------------------------------------------------------------------------------------------------------
/**Функція з псевдомасивом*/
/**Псевдомасив це обєкт який веде себе як масив*/

/*function sumator(a=1, b=20)  {

if(typeof a !== 'number' || typeof b !== 'number'){
    throw new Error('Something is not number')
}
console.log(arguments); //Так задається псевдомасив має всі ті самі значення що і звичайний масив/ виводить нам ключ і значення кожного елемента ключі рахує з 0;
}

sumator(8, 6);
*/
//---------------------------------------------------------------------------------------------------------------------
/**Function return*/

/**Якщо не задати return то сума яку ми отримали не вийде за облвсть виконання функції і ми не зможемо в подальшому виконувати якісь дії з нею*/
/*function sum(a, b) {
    console.log(a + b);
}

let x = sum(2, 5) / 2;// Це дасть на NaN

console.log(x);*/

//---------------------------------------------------------------------------------------------------------------------

/*function sum(a, b) {
    let result = a + b;
    return result; //return дозволяє нам випустити результат функції за область видимості
    // aбо написати return a+b;
}

let x = sum(2, 5);

console.log(x);
console.log(x / 2);*/


//______________________________________________________________________________________________________________________

/**Цикли які мажна писати з масивами, цикли які можна юзати з обєктами*/
/*
function sumator(yyy = 1, b = 20) {

    if (typeof yyy !== 'number' || typeof b !== 'number'){
        throw new Error('Something is not number')
    }
    for (let i = 0; i < arguments.length; i++) {
        const argument = arguments[i];
        console.log(argument);
    }

    let i = 0;

    while (i < arguments.length){
        console.log(arguments[i]);;
        i++
    }


}

sumator(yyy=9999, b =2);
*/




//---------------------------------------------------------------------------------------------------------------------
//Цикли for OF і forIN

/**Цикл For OF викликається коротким записом iter, цей цикл пробыгає по масиву від початку і до кінця чітко не можна юзати з обєктами!!! */
/*
let array = [2, 5, 8, 7 ,0];
console.log('-----------------');
for (const arrayElement of array) {

    console.log(arrayElement);

}
*/


/**Цикл FOR IN використовуэться для обєктів і масивів він пробігається по обєкту або масиву і дістає всі ключі або індекси*/

/*
let object = {name: 'Viktor', age: 23, car: false};

for (const objectElement in object){
    console.log(objectElement);
}
*/


//__________________________________

//Властивсті Object keys i Object values

/*
let object = {name: 'Viktor', age: 23, car: false};

let keys = Object.keys(object); //Передаэ всы ключі обєкта у вигляді масиву з яким можна вже працювати як з масивом
let values = Object.values(object);//Передаэ всы значення обэкту у вигляды масиву
console.log(keys);
console.log(values);
*/
